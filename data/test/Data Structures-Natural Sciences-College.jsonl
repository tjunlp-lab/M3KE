{"id": 0, "question": "数据元素及其关系在计算机存储器内的表示，称为数据的？", "A": "逻辑结构", "B": "存储结构", "C": "线性结构", "D": "非线性结构", "answer": ""}
{"id": 1, "question": "某带头结点的单链表的头指针为head，判定该链表为非空的条件是？", "A": "headNULL", "B": "head->nextNULL", "C": "head!=NULL", "D": "head->next!=NULL", "answer": ""}
{"id": 2, "question": "导致栈上溢的操作是？", "A": "栈满时执行的出栈", "B": "栈满时执行的入栈", "C": "栈空时执行的出栈", "D": "栈空时执行的入栈", "answer": ""}
{"id": 3, "question": "设数组A[m]为循环队列Q的存储空间，front为队头指针，rear为队尾指针，则判定Q为空队列的条件是？", "A": "(rear-front>%m==1", "B": "front==rear", "C": "(rear-front>%m==m-1", "D": "front==(rear+1>%m", "answer": ""}
{"id": 4, "question": "对记录序列(314，298，508，123，486，145>依次按个位和十位进行两趟基数排序之后所得结果为？", "A": "123145000000000000", "B": "508，314，123，145，", "C": "486314000000000000", "D": "298，123，508，486，", "answer": ""}
{"id": 5, "question": "在待排关键字序列基本有序的前提下，效率最高的排序方法是？", "A": "直接插入排序", "B": "快速排序", "C": "直接选择排序", "D": "归并排序", "answer": ""}
{"id": 6, "question": "将12个数据元素保存在顺序表中，若第一个元素的存储地址是100，第二个元素的存储地址是105，则该顺序表最后一个元素的存储地址是？", "A": "111", "B": "144", "C": "155", "D": "156", "answer": ""}
{"id": 7, "question": "设栈的初始状态为空，元素1,2,3,4,5,6依次入栈，栈的容量是3，能够得到的出栈序列是？", "A": "1,2,6,4,3,5", "B": "2,4,3,6，5,1", "C": "3,1,2,5,4,6", "D": "3,2,6,5,1,4", "answer": ""}
{"id": 8, "question": "设指针变量head指向非空单循环链表的头结点，指针变量p指向终端结点，next是结点的指针域，则下列逻辑表达式中，值为真的是？", "A": "p-next->next==head", "B": "p->next==head", "C": "p-next->next==NULL", "D": "p->next==NULL", "answer": ""}
{"id": 9, "question": "已知一颗高度为4的完全二叉树T共有5个叶结点，则T中结点个数最少是？", "A": "9", "B": "10", "C": "11", "D": "12", "answer": ""}
{"id": 10, "question": "在一颗非空二叉树的中序遍历序列中，所有列在根结点前面的是？", "A": "左子树中的部分结点", "B": "左子树中的全部结点", "C": "右子树中的部分结点", "D": "右子树中的全部结点", "answer": ""}
{"id": 11, "question": "用领接矩阵表示有n个顶点和e条边的无向图，采用压缩方式存储，矩阵零元素的个数是？", "A": "n(n+1)/2-e", "B": "(n+1)/2-2e", "C": "nxn-e", "D": "nxn-2e", "answer": ""}
{"id": 12, "question": "无向图G中所有顶点的度数之和是20，则G中的边数是？", "A": "10", "B": "20", "C": "30", "D": "40", "answer": ""}
{"id": 13, "question": "设有向图G含有n个顶点、e条边，使用领接表存储。对G进行广度优先遍历的算法的时间复杂度是？", "A": "0(n)", "B": "0(e)", "C": "0(n+e)", "D": "0(nxe)", "answer": ""}
{"id": 14, "question": "对数据序列（25，15，7,18,10,0,4）采用直接插入排序进行升序排序，两趟排序后，得到的排序结果为？", "A": "0,4,7,18,10,25,15", "B": "0，4,25,15，7,18,10", "C": "7,15,10,0,4,18,25", "D": "7,15,25,18,10,0,4", "answer": ""}
{"id": 15, "question": "下列排序方法中，稳定的排序方法是？", "A": "希尔排序", "B": "归并排序", "C": "堆排序", "D": "快速排序", "answer": ""}
{"id": 16, "question": "一组记录的关键码为（45,68,57，13,24,89），利用堆排序算法进行升序排序，建立的初始堆为？", "A": "68,45,57,13,24,89", "B": "89,68,57,13,24,45", "C": "89,68,57,45,24,13", "D": "89,57,68,24,45,13", "answer": ""}
{"id": 17, "question": "一颗二叉排序树中，关键字n所在结点是关键字m所在结点的祖先，则？", "A": "n一定大于m", "B": "n一定小于m", "C": "n一定等于m", "D": "n与m的大小关系不确定", "answer": ""}
{"id": 18, "question": "设散列表长m=14,散列函数H（key）=key%11。表中已保存4个关键字：addr(15)=4,addr(38)=5,addr(61)=6,addr(84)=7,其余地址均为空。保存关键字49时存在冲突，采用线性探查法来处理。则查找关键字49时的探查次数是？", "A": "1", "B": "2", "C": "4", "D": "8", "answer": ""}
{"id": 19, "question": "若一个算法的时间复杂度用T(n)表示，其中n的含义是？", "A": "问题规模", "B": "语句条数", "C": "循环层数", "D": "函数数量", "answer": ""}
{"id": 20, "question": "具有线性结构的数据结构是？", "A": "树", "B": "图", "C": "栈和队列", "D": "广义表", "answer": ""}
{"id": 21, "question": "程序段for(i=0;i<n;i++)for(j=1;j<m;j++)A[i][j]=0；的时间复杂度是？", "A": "O(n)", "B": "O(m+n+1)", "C": "O(m+n)", "D": "O(m*n)", "answer": ""}
{"id": 22, "question": "在单链表中，指针p指向元素为x的结点，实现“删除x的后继”的语句是？", "A": "p=p->next;", "B": "p->next=p->next->next;", "C": "p->next=p;", "D": "p=p->next->next;", "answer": ""}
{"id": 23, "question": "在头指针为head且表长大于1的单循环链表中，指针p指向表中某个结点，若p->next->next=head,则？", "A": "p指向头结点", "B": "p指向尾结点", "C": "*p的直接后继是头结点", "D": "*P的直接后继是尾结点", "answer": ""}
{"id": 24, "question": "在下列排序方法中，平均时间性能为O(nlogn)且空间性能最好的是？", "A": "快速排序", "B": "堆排序", "C": "归并排序", "D": "基数排序", "answer": ""}
{"id": 25, "question": "已知一组关键字为{25,48,36,72,79,82,23,40,16,35}，其中每相邻两个为有序子序列。对这些子序列进行一趟两两归并的结果是？", "A": "{25,36,48,72,23,40,79,82,16,35}", "B": "{25,36,48,72,16,23,40,79,82,35}", "C": "{25,36,48,72,16,23,35,40,79,82}", "D": "{16,23,25,35,36,40,48,72,79,82}", "answer": ""}
{"id": 26, "question": "设顺序存储的线性表共有123个元素，按分块查找的要求等分成3块。若对索引表采用顺序查找来确定块，并在确定的块中进行顺序查找，则在查找概率相等的情况下，分块查找成功时的平均查找长度为？", "A": "21", "B": "23", "C": "41", "D": "62", "answer": ""}
{"id": 27, "question": "索引非顺序文件的特点是？", "A": "主文件无序，索引表有序", "B": "主文件有序，索引表无序", "C": "主文件有序，索引表有序", "D": "主文件无序，索引表无序", "answer": ""}
{"id": 28, "question": "倒排文件的主要优点是？", "A": "便于进行插入和删除运算", "B": "便于进行文件的恢复", "C": "便于进行多关键字查询", "D": "节省存储空间", "answer": ""}
{"id": 29, "question": "计算机识别、存储和加工处理的对象被统称为？", "A": "数据", "B": "数据元素", "C": "数据结构", "D": "数据类型", "answer": ""}
{"id": 30, "question": "在具有n个结点的有序单链表中插入一个新结点并使链表仍然有序的时间复杂度是？", "A": "O(1)", "B": "O(n)", "C": "O(nlogn)", "D": "O(n2)", "answer": ""}
{"id": 31, "question": "队和栈的主要区别是？", "A": "逻辑结构不同", "B": "存储结构不同", "C": "所包含的运算个数不同", "D": "限定插入和删除的位置不同", "answer": ""}
{"id": 32, "question": "链栈与顺序栈相比，比较明显的优点是？", "A": "插入操作更加方便", "B": "删除操作更加方便", "C": "不会出现下溢的情况", "D": "不会出现上溢的情况", "answer": ""}
{"id": 33, "question": "采用两类不同存储结构的字符串可分别简称为？", "A": "主串和子串", "B": "顺序串和链串", "C": "目标串和模式串", "D": "变量串和常量串", "answer": ""}
{"id": 34, "question": "已知广义表的表头为a，表尾为(b,c)，则此广义表为？", "A": "(a,(b,c))", "B": "(a,b,c)", "C": "((a),b,c)", "D": "((a,b,c))", "answer": ""}
{"id": 35, "question": "二维数组A按行优先顺序存储，其中每个元素占1个存储单元。若A［1］［1］的存储地址为420，A［3］［3］的存储地址为446，则A［5］［5］的存储地址为？", "A": "470", "B": "471", "C": "472", "D": "473", "answer": ""}
{"id": 36, "question": "二叉树中第5层上的结点个数最多为？", "A": "8", "B": "15", "C": "16", "D": "32", "answer": ""}
{"id": 37, "question": "下列编码中属前缀码的是？", "A": "{1,01,000,001}", "B": "{1,01,011,010}", "C": "{0,10,110,11}", "D": "{0,1,00,11}", "answer": ""}
{"id": 38, "question": "如果某图的邻接矩阵是对角线元素均为零的上三角矩阵，则此图是？", "A": "有向完全图", "B": "连通图", "C": "强连通图", "D": "有向无环图", "answer": ""}
{"id": 39, "question": "对n个关键字的序列进行快速排序，平均情况下的空间复杂度为？", "A": "O(1)", "B": "O(logn)", "C": "O(n)", "D": "O(nlogn)", "answer": ""}
{"id": 40, "question": "求单链表中当前结点的后继和前驱的时间复杂度分别是？", "A": "O（n）和O（1）", "B": "O（1）和O（1）", "C": "O（1）和O（n）", "D": "O(n)和O（n）", "answer": ""}
{"id": 41, "question": "非空的单循环链表的头指针为head,尾指针为rear，则下列条件成立的是？", "A": "rear->next==head", "B": "rear->next->next==head", "C": "head->next==rear", "D": "head->next->next==rear", "answer": ""}
{"id": 42, "question": "若允许表达式内多种括号混合嵌套，则为检查表达式中括号是否正确配对的算法，通常选用的辅助结构是？", "A": "栈", "B": "线性表", "C": "队列", "D": "二叉排序树", "answer": ""}
{"id": 43, "question": "已知主串s=″ADBADABBAAB″，模式串t=″ADAB″，则应用朴素的串匹配算法进行模式匹配过程中，无效位移的次数是？", "A": "2", "B": "3", "C": "4", "D": "5", "answer": ""}
{"id": 44, "question": "串s=″DataStructure″中长度为3的子串的数目是？", "A": "9", "B": "11", "C": "12", "D": "14", "answer": ""}
{"id": 45, "question": "假设以行优先顺序存储三维数组R[6][9][6]，其中元素R[0][0][0]的地址为2100，且每个元素占4个存储单元，则存储地址为2836的元素是？", "A": "R[3][3][3]", "B": "R[3][3][4]", "C": "R[4][3][5]", "D": "R[4][3][4]", "answer": ""}
{"id": 46, "question": "除第一层外，满二叉树中每一层结点个数是上一层结点个数的？", "A": "1/2倍", "B": "1倍", "C": "2倍", "D": "3倍", "answer": ""}
{"id": 47, "question": "对于含n个顶点和e条边的图，采用邻接矩阵表示的空间复杂度为？", "A": "O（n）", "B": "O(e)", "C": "O(n+e)", "D": "O(n2)", "answer": ""}
{"id": 48, "question": "如果求一个连通图中以某个顶点为根的高度最小的生成树，应采用？", "A": "深度优先搜索算法", "B": "广度优先搜索算法", "C": "求最小生成树的prim算法", "D": "拓扑排序算法", "answer": ""}
{"id": 49, "question": "快速排序在最坏情况下的时间复杂度是？", "A": "O(n2log2n)", "B": "O(n2)", "C": "O(nlog2n)", "D": "O(log2n)", "answer": ""}
{"id": 50, "question": "能进行二分查找的线性表,必须以？", "A": "顺序方式存储,且元素按关键字有序", "B": "链式方式存储,且元素按关键字有序", "C": "顺序方式存储,且元素按关键字分块有序", "D": "链式方式存储,且元素按关键字分块有序", "answer": ""}
{"id": 51, "question": "为使平均查找长度达到最小,当由关键字集合{05,11,21,25,37,40,41,62,84}构建二叉排序树时,第一个插入的关键字应为？", "A": "5", "B": "37", "C": "41", "D": "62", "answer": ""}
{"id": 52, "question": "SAM文件的周期性整理是为了空出？", "A": "磁道索引", "B": "柱面索引", "C": "柱面基本区", "D": "柱面溢出区", "answer": ""}
{"id": 53, "question": "数据结构是？", "A": "一种数据类型", "B": "数据的存储结构", "C": "一组性质相同的数据元素的集合", "D": "相互之间存在一种或多种特定关系的数据元素的集合", "answer": ""}
{"id": 54, "question": "算法分析的目的是？", "A": "辨别数据结构的合理性", "B": "评价算法的效率", "C": "研究算法中输入与输出的关系", "D": "鉴别算法的可读性", "answer": ""}
{"id": 55, "question": "在线性表的下列运算中，不改变数据元素之间结构关系的运算是？", "A": "插入", "B": "删除", "C": "排序", "D": "定位", "answer": ""}
{"id": 56, "question": "若进栈序列为1，2，3，4，5，6，且进栈和出栈可以穿插进行，则可能出现的出栈序列为？", "A": "3，2，6，1，4，5", "B": "3，4，2，1，6，5", "C": "1，2，5，3，4，6", "D": "5，6，4，2，3，1", "answer": ""}
{"id": 57, "question": "设串sl=″DataStructureswithJava″,s2=″it″，则子串定位函数index(s1,s2)的值为？", "A": "15", "B": "16", "C": "17", "D": "18", "answer": ""}
{"id": 58, "question": "二维数组A[8][9]按行优先顺序存储，若数组元素A[2][3]的存储地址为1087，A[4][7]的存储地址为1153，则数组元素A[6][7]的存储地址为？", "A": "1207", "B": "1209", "C": "1211", "D": "1213", "answer": ""}
{"id": 59, "question": "在按层次遍历二叉树的算法中，需要借助的辅助数据结构是？", "A": "队列", "B": "栈", "C": "线性表", "D": "有序表", "answer": ""}
{"id": 60, "question": "在任意一棵二叉树的前序序列和后序序列中，各叶子之间的相对次序关系？", "A": "不一定相同", "B": "都相同", "C": "都不相同", "D": "互为逆序", "answer": ""}
{"id": 61, "question": "若采用孩子兄弟链表作为树的存储结构，则树的后序遍历应采用二叉树的？", "A": "层次遍历算法", "B": "前序遍历算法", "C": "中序遍历算法", "D": "后序遍历算法", "answer": ""}
{"id": 62, "question": "若用邻接矩阵表示一个有向图，则其中每一列包含的″1″的个数为？", "A": "图中每个顶点的入度", "B": "图中每个顶点的出度", "C": "图中弧的条数", "D": "图中连通分量的数目", "answer": ""}
{"id": 63, "question": "图的邻接矩阵表示法适用于表示？", "A": "无向图", "B": "有向图", "C": "稠密图", "D": "稀疏图", "answer": ""}
{"id": 64, "question": "在对n个关键字进行直接选择排序的过程中，每一趟都要从无序区选出最小关键字元素，则在进行第i趟排序之前，无序区中关键字元素的个数为？", "A": "i", "B": "i+1", "C": "n-i", "D": "n-i+1", "answer": ""}
{"id": 65, "question": "在带头结点的双向循环链表中插入一个新结点，需要修改的指针域数量是？", "A": "2个", "B": "3个", "C": "4个", "D": "6个", "answer": ""}
{"id": 66, "question": "假设以数组A[60]存放循环队列的元素，其头指针是front=47，当前队列有50个元素，则队列的尾指针值为？", "A": "3", "B": "37", "C": "50", "D": "97", "answer": ""}
{"id": 67, "question": "数据的四种存储结构是？", "A": "顺序存储结构、链接存储结构、索引存储结构和散列存储结构", "B": "线性存储结构、非线性存储结构、树型存储结构和图型存储结构", "C": "集合存储结构、一对一存储结构、一对多存储结构和多对多存储结构", "D": "顺序存储结构、树型存储结构、图型存储结构和散列存储结构", "answer": ""}
{"id": 68, "question": "若对某线性表最常见的操作是在最后一个结点之后插入一个新结点或删除最后一个结点，要使操作时间最少，下列选项中，应选择的存储结构是？", "A": "无头结点的单向链表", "B": "带头结点的单向链表", "C": "带头结点的双循环链表", "D": "带头结点的单循环链表", "answer": ""}
{"id": 69, "question": "队列的特点是？", "A": "允许在表的任何位置进行插入和删除", "B": "只允许在表的一端进行插入和删除", "C": "允许在表的两端进行插入和删除", "D": "只允许在表的一端进行插入，在另一端进行删除", "answer": ""}
{"id": 70, "question": "要以O（nlogn）时间复杂度进行稳定的排序，可用的排序方法是？", "A": "归并排序", "B": "快速排序", "C": "堆排序", "D": "冒泡排序", "answer": ""}
{"id": 71, "question": "若希望在1000个无序元素中尽快求得前10个最大元素，应借用？", "A": "堆排序", "B": "快速排序", "C": "冒泡排序", "D": "归并排序", "answer": ""}
{"id": 72, "question": "对有序表进行二分查找成功时，元素比较的次数？", "A": "仅与表中元素的值有关", "B": "仅与表的长度和被查元素的位置有关", "C": "仅与被查元素的值有关", "D": "仅与表中元素按升序或降序排列有关", "answer": ""}
{"id": 73, "question": "散列文件是一种？", "A": "顺序存取的文件", "B": "随机存取的文件", "C": "索引存取的文件", "D": "索引顺序存取的文件", "answer": ""}
{"id": 74, "question": "某线性表中最常见的操作是在最后一个元素之后插入元素和删除第一个元素，则最节省运算时间的存储结构是？", "A": "单链表", "B": "双链表", "C": "仅有头指针的单循环链表", "D": "仅有尾指针的单循环链表", "answer": ""}
{"id": 75, "question": "无论待排序列是否有序，排序算法时间复杂度都是O(n2)的排序方法是？", "A": "快速排序", "B": "归并排序", "C": "冒泡排序", "D": "直接选择排序", "answer": ""}
{"id": 76, "question": "已知二叉排序树G，要输出其结点的有序序列，则采用的遍历方法是？", "A": "按层遍历", "B": "前序遍历", "C": "中序遍历", "D": "后序遍历", "answer": ""}
{"id": 77, "question": "用ISAM和VSAM组织的文件都属于？", "A": "散列文件", "B": "索引顺序文件", "C": "索引非顺序文件", "D": "多关键字文件", "answer": ""}
{"id": 78, "question": "下列关于顺序栈的叙述中，正确的是？", "A": "入栈操作需要判断栈满，出栈操作需要判断栈空", "B": "入栈操作不需要判断栈满，出栈操作需要判断栈空", "C": "入栈操作需要判断栈满，出栈操作不需要判断栈空", "D": "入栈操作不需要判断栈满，出栈操作不需要判断栈空", "answer": ""}
{"id": 79, "question": "a是一个10×10的对称矩阵，若采用行优先的下三角压缩存储，第一个元素a[0,0]的存储地址为1，每个元素占一个存储单元，则a[7,5]的地址为？", "A": "25", "B": "26", "C": "33", "D": "34", "answer": ""}
{"id": 80, "question": "树的后序遍历等价于该树对应二叉树的？", "A": "层次遍历", "B": "前序遍历", "C": "中序遍历", "D": "后序遍历", "answer": ""}
{"id": 81, "question": "下列关于m阶B树的叙述中，错误的是？", "A": "每个结点至多有m个关键字", "B": "每个结点至多有m棵子树", "C": "插入关键字时，经过结点分裂使树高增加", "D": "删除关键字时经过结点合并使树高降低", "answer": ""}
{"id": 82, "question": "下列编码集合中，属于前缀编码的一组是？", "A": "{11,10,001,101,0001}", "B": "{00,010,0110,1000}", "C": "{11,01,001,0101,0001}", "D": "{0,10,110,1011}", "answer": ""}
{"id": 83, "question": "对序列(8,13,26,55,29,44)从小到大进行基数排序，第一趟排序的结果是？", "A": "(13,44,55,26,8,29)", "B": "(13,26,55,44,8,29)", "C": "(8,13,26,29,44,55)", "D": "(29,26,8,44,55,13)", "answer": ""}
{"id": 84, "question": "采用分块查找时，要求数据？", "A": "块内有序", "B": "分块有序", "C": "分块无序", "D": "每块中数据个数必须相同", "answer": ""}
{"id": 85, "question": "下列关于散列函数的说法正确的是？", "A": "散列函数越复杂越好", "B": "散列函数越简单越好", "C": "用除余法构造的散列函数是最好的", "D": "在冲突尽可能少的情况下，散列函数越简单越好", "answer": ""}
{"id": 86, "question": "迪杰斯特拉(Dijkstra)算法的功能是？", "A": "求图中某顶点到其它顶点的最短路径", "B": "求图中所有顶点之间的最短路径", "C": "求图的最小生成树", "D": "求图的拓扑排序序列", "answer": ""}
{"id": 87, "question": "若栈的进栈序列为1，2，3，4，5，则经过出入栈操作不可能获得的出栈序列是？", "A": "4，5，3，2，1", "B": "4，3，5，1，2", "C": "1，2，3，4，5", "D": "5，4，3，2，1", "answer": ""}
{"id": 88, "question": "A是7×4的二维数组，按行优先方式顺序存储，元素A[0][0]的存储地址为1000，若每个元素占2个字节，则元素A[3][3]的存储地址为？", "A": "1015", "B": "1016", "C": "1028", "D": "1030", "answer": ""}
{"id": 89, "question": "深度为4的完全二叉树的结点数至少为？", "A": "4", "B": "8", "C": "13", "D": "15", "answer": ""}
{"id": 90, "question": "若采用邻接矩阵A存储有向图G，则结点k的入度等于A中？", "A": "结点k对应行元素之和", "B": "结点k对应列元素之和", "C": "结点k对应行和列元素之和", "D": "非零元素之和", "answer": ""}
{"id": 91, "question": "无向图G的邻接矩阵一定是？", "A": "对称矩阵", "B": "对角矩阵", "C": "三角矩阵", "D": "单位矩阵", "answer": ""}
{"id": 92, "question": "下列关于有向带权图G的叙述中，错误的是？", "A": "图G的任何一棵生成树都不含有回路", "B": "图G生成树所含的边数等于顶点数减1", "C": "图G含有回路时无法得到拓扑序列", "D": "图G的最小生成树总是唯一的", "answer": ""}
{"id": 93, "question": "在下列排序算法中，关键字比较次数与初始排列次序无关的是？", "A": "冒泡排序", "B": "希尔排序", "C": "直接插入排序", "D": "直接选择排序", "answer": ""}
{"id": 94, "question": "下列线性表中，能使用二分查找的是？", "A": "顺序存储(2,12,5,6,9,3,89,34,25)", "B": "链式存储(2,12,5,6,9,3,89,34,25)", "C": "顺序存储(2,3,5,6,9,12,25,34,89)", "D": "链式存储(2,3,5,6,9,12,25,34,89)", "answer": ""}
{"id": 95, "question": "在下列查找方法中，平均查找长度与结点数量无直接关系的是？", "A": "顺序查找", "B": "分块查找", "C": "散列查找", "D": "基于B树的查找", "answer": ""}
{"id": 96, "question": "下列排序算法中，时间复杂度为O(nlog2n)的算法是？", "A": "快速排序", "B": "冒泡排序", "C": "直接选择排序", "D": "直接插入排序", "answer": ""}
{"id": 97, "question": "下列选项中，符合堆定义的是？", "A": "{102，24，55，60，89，93}", "B": "{24，89，55，60，93，102}", "C": "{102，93，55，60，89，24}", "D": "{102，60。89，93，55，24}", "answer": ""}
{"id": 98, "question": "已知关键字序列为{66，82，25，51，98，108}，利用快速排序方法，以第一个元素为基准得到的一趟排序结果为？", "A": "{25，51，66，82，98，108}", "B": "{25，51，66，98，82，108}", "C": "{51，25，66，108，98，82}", "D": "{51，25，66，82，98，108}", "answer": ""}
{"id": 99, "question": "将长度为n的单链表连接在长度为m的单链表之后，其算法的时间复杂度为？", "A": "O(1)", "B": "O(m)", "C": "O(n)", "D": "O(m+n)", "answer": ""}
{"id": 100, "question": "若串str=”Software”，其子串的数目是？", "A": "8", "B": "9", "C": "36", "D": "37", "answer": ""}
{"id": 101, "question": "设有一个10阶的下三角矩阵A，采用行优先压缩存储方式，all为第一个元素，其存储地址为1000，每个元素占一个地址单元，则a85的地址为？", "A": "1012", "B": "1017", "C": "1032", "D": "1039", "answer": ""}
{"id": 102, "question": "允许结点共享的广义表称为？", "A": "纯表", "B": "线性表", "C": "递归表", "D": "再入表", "answer": ""}
{"id": 103, "question": "递归实现或函数调用时，处理参数及返回地址，应采用的数据结构是？", "A": "堆栈", "B": "多维数组", "C": "队列", "D": "线性表", "answer": ""}
{"id": 104, "question": "设有两个串p和q，其中q是p的子串，则求q在p中首次出现位置的算法称为？", "A": "求子串", "B": "串联接", "C": "串匹配", "D": "求串长", "answer": ""}
{"id": 105, "question": "若一棵具有n(n>0)个结点的二叉树的先序序列与后序序列正好相反，则该二叉树一定是？", "A": "结点均无左孩子的二叉树", "B": "结点均无右孩子的二叉树", "C": "高度为n的二叉树", "D": "存在度为2的结点的二叉树", "answer": ""}
{"id": 106, "question": "若一棵二叉树中度为l的结点个数是3，度为2的结点个数是4，则该二叉树叶子结点的个数是？", "A": "4", "B": "5", "C": "7", "D": "8", "answer": ""}
{"id": 107, "question": "下列叙述中错误的是？", "A": "图的遍历是从给定的源点出发对每一个顶点访问且仅访问一次", "B": "图的遍历可以采用深度优先遍历和广度优先遍历", "C": "图的广度优先遍历只适用于无向图", "D": "图的深度优先遍历是一个递归过程", "answer": ""}
{"id": 108, "question": "已知有向图G=(V，E)，其中V={V1，V2，V3，V4}，E={<V1，V2>，<V1，V3>，<V2，V3>，<V2，V4>，<V3，V4>}，图G的拓扑序列是？", "A": "V1,V2,V3,V4", "B": "V1,V3,V2,V4", "C": "V1,V3,V4,V2", "D": "V1,V2,V4,V3", "answer": ""}
{"id": 109, "question": "平均时间复杂度为O(nlogn)的稳定排序算法是？", "A": "快速排序", "B": "堆排序", "C": "归并排序", "D": "冒泡排序", "answer": ""}
{"id": 110, "question": "已知关键字序列为(51，22，83，46，75，18，68，30)，对其进行快速排序，第一趟划分完成后的关键字序列是？", "A": "(18,22,30,46,51,68,75,83)", "B": "(30,18,22,46,51,75,83,68)", "C": "(46,30,22,18,51,75,68,83)", "D": "(30,22,18,46,51,75,68,83)", "answer": ""}
{"id": 111, "question": "某索引顺序表共有元素395个，平均分成5块。若先对索引表采用顺序查找，再对块中元素进行顺序查找，则在等概率情况下，分块查找成功的平均查找长度是？", "A": "43", "B": "79", "C": "198", "D": "200", "answer": ""}
{"id": 112, "question": "在含有10个关键字的3阶B-树中进行查找，至多访问的结点个数为？", "A": "2", "B": "3", "C": "4", "D": "5", "answer": ""}
{"id": 113, "question": "ISAM文件系统中采用多级索引的目的是？", "A": "提高检索效率", "B": "提高存储效率", "C": "减少数据的冗余", "D": "方便文件的修改", "answer": ""}
{"id": 114, "question": "设栈的初始状态为空，入栈序列为1，2，3，4，5，6，若出栈序列为2，4，3，6，5，1，则操作过程中栈中元素个数最多时为？", "A": "2个", "B": "3个", "C": "4个", "D": "6个", "answer": ""}
{"id": 115, "question": "3栈中有a、b和c三个元素，a是栈底元素，c是栈顶元素，元素d等待进栈，则不可能的出栈序列是？", "A": "dcba", "B": "cbda", "C": "cadb", "D": "cdba", "answer": ""}
{"id": 116, "question": "稀疏矩阵的三元组表是？", "A": "顺序存储结构", "B": "链式存储结构", "C": "索引存储结构", "D": "散列表存储结构", "answer": ""}
{"id": 117, "question": "已知广义表G，head(G)与tail(G)的深度均为6，则G的深度是？", "A": "5", "B": "6", "C": "7", "D": "8", "answer": ""}
{"id": 118, "question": "下列关于m阶B树的叙述中，错误的是？", "A": "每个结点至多有m棵子树", "B": "每个结点至多有m-1个关键字", "C": "所有的叶结点均在同一层上", "D": "根结点至少有/2m棵子树", "answer": ""}
{"id": 119, "question": "迪杰斯特拉(Dijkstra)算法的功能是？", "A": "求图中某顶点到其他顶点的最短路径", "B": "求图中所有顶点之间的最短路径", "C": "求图的最小生成树", "D": "求图的拓扑排序序列", "answer": ""}
{"id": 120, "question": "若栈的进栈序列为1，2，3，4，5，则经过出入栈操作不可能获得的出栈序列是？", "A": "4，5，3，2，1", "B": "4，3，5，1，2", "C": "1，2，3，4，5", "D": "5，4，3，2，1", "answer": ""}
{"id": 121, "question": "无向图G的邻接矩阵一定是？", "A": "对称矩阵", "B": "对角矩阵", "C": "三角矩阵", "D": "单位矩阵", "answer": ""}
{"id": 122, "question": "若需高效地查询多关键字文件，可以采用的文件组织方式为？", "A": "顺序文件", "B": "索引文件", "C": "散列文件", "D": "倒排文件", "answer": ""}
{"id": 123, "question": "在数据的逻辑结构中，树结构和图结构都是？", "A": "非线性结构", "B": "线性结构", "C": "动态结构", "D": "静态结构", "answer": ""}
{"id": 124, "question": "每个结点有且仅有一个直接前趋和多个(或无)直接后继(第一个结点除外)的数据结构称为？", "A": "树状结构", "B": "网状结构", "C": "线性结构", "D": "层次结构", "answer": ""}
{"id": 125, "question": "某线性表中最常用的操作是在最后一个元素之后插入元素和删除第一个元素，则最节省运算时间的存储结构？", "A": "单链表", "B": "双链表", "C": "仅有头指针的单循环链表", "D": "仅有尾指针的单循环链表", "answer": ""}
{"id": 126, "question": "已知一个栈的入栈序列是1，2，3，⋯，n，其输出序列为pl，p2，p3⋯.，pn，若p1是n，则pi是？", "A": "i", "B": "n-i", "C": "n-i+l", "D": "不确定", "answer": ""}
{"id": 127, "question": "下面关于串的叙述中，正确的是？", "A": "串是一种特殊的线性表", "B": "串中元素只能是字母", "C": "空串就是空白串", "D": "串的长度必须大于零", "answer": ""}
{"id": 128, "question": "无向完全图G有n个结点，则它的边的总数为？", "A": "n2", "B": "n(n-1)", "C": "n(n-1)/2", "D": "(n-1)", "answer": ""}
{"id": 129, "question": "若一棵二叉树有10个度为2的结点，5个度为1的结点，则度为0的结点数是？", "A": "9", "B": "11", "C": "15", "D": "不确定", "answer": ""}
{"id": 130, "question": "对线性表进行二分查找时，要求线性表必须是？", "A": "顺序存储", "B": "链式存储", "C": "顺序存储且按关键字有序", "D": "链式存储且按关键字有序", "answer": ""}
{"id": 131, "question": "分别用以下序列生成二叉排序树，其中三个序列生成的二叉排序树是相同的，不同的序列是？", "A": "(4,1,2,3,5)", "B": "(4,2,3,l,5)", "C": "(4,5,2,1,3)", "D": "(4,2,1,5,3)", "answer": ""}
{"id": 132, "question": "有关图中路径的定义，表述正确的是？", "A": "路径是顶点和相邻顶点偶对构成的边所形成的序列", "B": "路径是不同顶点所形成的序列", "C": "路径是不同边所形成的序列", "D": "路径是不同顶点和不同边所形成的集合", "answer": ""}
{"id": 133, "question": "串的长度是指？", "A": "串中所含不同字母的个数", "B": "串中所含字符的个数", "C": "串中所含不同字符的个数", "D": "串中所含非空格字符的个数", "answer": ""}
{"id": 134, "question": "与串的逻辑结构不同的数据结构是？", "A": "线性表", "B": "栈", "C": "队列", "D": "树", "answer": ""}
{"id": 135, "question": "设单链表中指针p指向结点A，若要删除A的直接后继，则所需修改指针的操作为？", "A": "p->next=p->next->next", "B": "p=p->next", "C": "p=p->next->next", "D": "p->next=p", "answer": ""}
{"id": 136, "question": "下列排序算法中，某一趟结束后未必能选出一个元素放在其最终位置上的是？", "A": "堆排序", "B": "冒泡排序", "C": "直接插入排序", "D": "快速排序", "answer": ""}
{"id": 137, "question": "设字符串S1=″ABCDEFG″，S2=″PQRST″，则运算S=CONCAT(SUBSTR(S1,2,LENGTH(S2)),SUBSTR(S1,LENGTH(S2),2))后S的结果为？", "A": "″BCQR″", "B": "″BCDEF″", "C": "″BCDEFG″", "D": "″BCDEFEF″", "answer": ""}
{"id": 138, "question": "在平衡二叉树中插入一个结点后造成了不平衡，设最低的不平衡结点为A，并且A的左孩子的平衡因子为-1，右孩子的平衡因子为0，则使其平衡的调整方法为？", "A": "LL型", "B": "LR型", "C": "RL型", "D": "RR型", "answer": ""}
{"id": 139, "question": "如果结点A有3个兄弟结点，而且B为A的双亲，则B的度为？", "A": "1", "B": "3", "C": "4", "D": "5", "answer": ""}
{"id": 140, "question": "数据表A中每个元素距其最终位置较近，则最省时间的排序算法是？", "A": "堆排序", "B": "插入排序", "C": "直接选择排序", "D": "快速排序", "answer": ""}
{"id": 141, "question": "常用于函数调用的数据结构是？", "A": "栈", "B": "队列", "C": "链表", "D": "数组", "answer": ""}
{"id": 142, "question": "二维数组A［n］［m］以列优先顺序存储，数组A中每个元素占用1个字节，A［1］［1］为首元素，其地址为0，则元素A［i］［j］的地址为？", "A": "（i-1）×m+(j-1)", "B": "(j-1)×n+(i-1)", "C": "(j-1)×n+i", "D": "j×n+i", "answer": ""}
{"id": 143, "question": "图的广度优先搜索使用的数据结构是？", "A": "队列", "B": "树", "C": "栈", "D": "集合", "answer": ""}
{"id": 144, "question": "序列（21,19,37,5,2）经冒泡排序法由小到大排序，在第一次执行交换后所得结果为？", "A": "(19，21，37，5，2)", "B": "(21，19，5，37，2)", "C": "(21，19，37，2，5)", "D": "(2，21，19，37，5)", "answer": ""}
{"id": 145, "question": "数据在计算机存储器内表示时，根据结点的关键字直接计算出该结点的存储地址，这种方法称为？", "A": "索引存储方法", "B": "顺序存储方法", "C": "链式存储方法", "D": "散列存储方法", "answer": ""}
{"id": 146, "question": "在单链表中，存储每个结点有两个域，一个是数据域，另一个是指针域，指针域指向该结点的？", "A": "直接前趋", "B": "直接后继", "C": "开始结点", "D": "终端结点", "answer": ""}
{"id": 147, "question": "在链队列中执行入队操作，？", "A": "需判别队是否空", "B": "需判别队是否满", "C": "限制在链表头p进行", "D": "限制在链表尾p进行", "answer": ""}
{"id": 148, "question": "一整数序列26，59，77，31，51，11，19，42，以二路归并排序从小到大排序，第一阶段的归并结果为？", "A": "31，51，11，42，26，77，59，19", "B": "26，59，31，77，11，51，19，42", "C": "11，19，26，31，42，59，51，77", "D": "26，11，19，31，51，59，77，42", "answer": ""}
{"id": 149, "question": "在数据结构中，与所使用的计算机无关的是数据的__结构。", "A": "逻辑", "B": "存储", "C": "逻辑和存储", "D": "物理", "answer": ""}
{"id": 150, "question": "数据结构在计算机中的表示称为数据的？", "A": "存储结构", "B": "抽象数据类型", "C": "顺序结构", "D": "逻辑结构", "answer": ""}
{"id": 151, "question": "在计算机中存储数据时，不仅要存储各数据元素的值，而且还要存储？", "A": "数据的处理方法", "B": "数据元素的类型", "C": "数据元素之间的关系", "D": "数据的存储方法", "answer": ""}
{"id": 152, "question": "在计算机的存储器中表示时，逻辑上相邻的两个元素对应的物理地址也是相邻的，这种存储结构称之为？", "A": "逻辑结构", "B": "顺序存储结构", "C": "链式存储结构", "D": "以上都正确", "answer": ""}
{"id": 153, "question": "算法的时间复杂度与__有关。", "A": "问题规模", "B": "计算机硬件性能", "C": "编译程序质量", "D": "程序设计语言", "answer": ""}
{"id": 154, "question": "算法分析的主要任务之一是分析？", "A": "算法是否具有较好的可读性", "B": "算法中是否存在语法错误", "C": "算法的功能是否符合设计要求", "D": "算法的执行时间和问题规模之间的关系", "answer": ""}
{"id": 155, "question": "某算法的时间复杂度为O(n2)，表明该算法的？", "A": "问题规模是n2", "B": "执行时间等于n2", "C": "执行时间与n2成正比", "D": "问题规模与n2成正比", "answer": ""}
{"id": 156, "question": "线性表的链式存储结构与顺序存储结构相比，优点是？", "A": "所有的操作算法实现简单", "B": "便于随机存取", "C": "便于插入和删除元素", "D": "节省存储空间", "answer": ""}
{"id": 157, "question": "在长度为n（n≥1）的双链表L中，在p结点之前插入一个新结点s的时间复杂度为？", "A": "O(1)", "B": "O(n)", "C": "O(n2)", "D": "O(nlog2n)", "answer": ""}
{"id": 158, "question": "一个栈的进栈序列是a、b、c、d、e，则栈的不可能的输出序列是？", "A": "edcba", "B": "decba", "C": "dceab", "D": "abcde", "answer": ""}
{"id": 159, "question": "栈和队列的共同点是？", "A": "都是先进后出", "B": "都是后进先出", "C": "只允许在端点处插入和删除元素", "D": "没有共同点", "answer": ""}
{"id": 160, "question": "栈和队列的不同点是？", "A": "都是线性表", "B": "都不是线性表", "C": "栈只能在同一端进行插入删除操作，而队列在不同端进行插入删除操作", "D": "没有不同点", "answer": ""}
{"id": 161, "question": "循环队列？", "A": "不会产生下溢出", "B": "不会产生上溢出", "C": "不会产生假溢出", "D": "以上都不对", "answer": ""}
{"id": 162, "question": "设有两个串s和t，求t在s中首次出现的位置的运算称作？", "A": "连接", "B": "模式匹配", "C": "求子串", "D": "求串长", "answer": ""}
{"id": 163, "question": "对稀疏矩阵进行压缩存储的目的是？", "A": "便于进行矩阵运算", "B": "便于输入和输出", "C": "节省存储空间", "D": "降低运算的时间复杂度", "answer": ""}
{"id": 164, "question": "一个稀疏矩阵采用压缩后，和直接采用二维数组存储相比会失去__特性。", "A": "顺序存储", "B": "随机存取", "C": "输入输出", "D": "以上都不对", "answer": ""}
{"id": 165, "question": "以下关于二叉树的说法中正确的是？", "A": "二叉树中每个结点的度均为2", "B": "二叉树中至少有一个结点的度为2", "C": "二叉树中每个结点的度可以小于2", "D": "二叉树中至少有一个结点", "answer": ""}
{"id": 166, "question": "若一棵二叉树具有10个度为2的结点，5个度为1的结点，则度为0的结点个数为？", "A": "9", "B": "11", "C": "15", "D": "不确定", "answer": ""}
{"id": 167, "question": "高度为5的二叉树至多有__个结点。", "A": "16", "B": "32", "C": "31", "D": "10", "answer": ""}
{"id": 168, "question": "高度为5的二叉树至少有__个结点。", "A": "5", "B": "6", "C": "7", "D": "31", "answer": ""}
{"id": 169, "question": "一棵高度为8的完全二叉树至少有__叶子结点。", "A": "63", "B": "64", "C": "127", "D": "128", "answer": ""}
{"id": 170, "question": "一棵高度为8的完全二叉树至多有__叶子结点。", "A": "63", "B": "64", "C": "127", "D": "128", "answer": ""}
{"id": 171, "question": "在一个无向图中，所有顶点的度之和等于边数的__倍。", "A": "44928", "B": "1", "C": "2", "D": "4", "answer": ""}
{"id": 172, "question": "一个有n个顶点的无向图最多有__条边。", "A": "n", "B": "n(n-1)", "C": "n(n-1)/2", "D": "2n", "answer": ""}
{"id": 173, "question": "一个有n个顶点的有向图最多有__条边。", "A": "n", "B": "n(n-1)", "C": "n(n-1)/2", "D": "2n", "answer": ""}
{"id": 174, "question": "在一个具有n个顶点的无向连通图中至少有__条边。", "A": "n", "B": "n+l", "C": "n-1", "D": "n/2", "answer": ""}
{"id": 175, "question": "在一个具有n个顶点的有向图中，构成强连通图时至少有__条边。", "A": "n", "B": "n+l", "C": "n-1", "D": "n/2", "answer": ""}
{"id": 176, "question": "一个图的邻接矩阵是对称矩阵，则该图一定是？", "A": "无向图", "B": "有向图", "C": "无向图或有向图", "D": "以上都不对", "answer": ""}
{"id": 177, "question": "一个图的邻接矩阵不是对称矩阵，则该图可能是？", "A": "无向图", "B": "有向图", "C": "无向图或有向图", "D": "以上都不对", "answer": ""}
{"id": 178, "question": "对于一个具有n个顶点的无向图，若采用邻接矩阵表示，则该矩阵大小是？", "A": "n", "B": "(n-1)2", "C": "n-1", "D": "n2", "answer": ""}
{"id": 179, "question": "对于一个具有n个顶点e条边的不带权无向图，若采用邻接矩阵表示，其中非零元素个数是？", "A": "n", "B": "2n", "C": "e", "D": "2e", "answer": ""}
{"id": 180, "question": "用邻接表存储图所用的空间大小？", "A": "与图的顶点和边数有关", "B": "只与图的边数有关", "C": "只与图的顶点数有关", "D": "与边数的平方有关", "answer": ""}
{"id": 181, "question": "n个顶点的连通图的生成树有__条边。", "A": "n", "B": "n-1", "C": "n+1", "D": "不确定", "answer": ""}
{"id": 182, "question": "Dijkstra算法是__方法求出图中从某顶点到其余顶点的最短路径的。", "A": "按长度递减的顺序", "B": "按长度递增的顺序", "C": "通过深度优先遍历", "D": "通过广度优先遍历", "answer": ""}
{"id": 183, "question": "关键路径是事件结点网络中？", "A": "从源点到汇点的最长路径", "B": "从源点到汇点的最短路径", "C": "最长的回路", "D": "最短的回路", "answer": ""}
{"id": 184, "question": "一个表示工程的AOE网中的关键路径？", "A": "必须是唯一的", "B": "可以有多条", "C": "可以没有", "D": "以上都不对", "answer": ""}
{"id": 185, "question": "对线性表进行折半查找时，要求线性表必须？", "A": "以顺序方式存储", "B": "以链接方式存储", "C": "以顺序方式存储，且结点按关键字有序排序", "D": "以链表方式存储，且结点按关键字有序排序", "answer": ""}
{"id": 186, "question": "以下查找方法中速度最快的是？", "A": "折半查找", "B": "顺序查找", "C": "分块查找", "D": "二叉排序树查找", "answer": ""}
{"id": 187, "question": "在哈希查找过程中，可用__来处理冲突。", "A": "除留余数法", "B": "数字分析法", "C": "线性探测法", "D": "关键字比较法", "answer": ""}
{"id": 188, "question": "哈希表中出现同义词冲突是指？", "A": "两个元素具有相同的序号", "B": "两个元素的关键字不同，而其他属性相同", "C": "数据元素过多", "D": "两个元素的关键字不同，而对应的哈希函数值相同", "answer": ""}
{"id": 189, "question": "以下排序方法中，__不需要进行关键字的比较。", "A": "快速排序", "B": "二路归并排序", "C": "基数排序", "D": "堆排序", "answer": ""}
{"id": 190, "question": "数据结构是指__的集合以及它们之间的关系。", "A": "数据元素", "B": "计算方法", "C": "逻辑存储", "D": "数据映像", "answer": ""}
{"id": 191, "question": "线性表是具有n个__的有限序列。", "A": "表元素", "B": "字符", "C": "数据元素", "D": "数据项", "answer": ""}
{"id": 192, "question": "线性表是？", "A": "一个有限序列，可以为空", "B": "一个有限序列，不可以为空", "C": "一个无限序列，可以为空", "D": "一个无限序列，不可以为空", "answer": ""}
{"id": 193, "question": "关于线性表的正确说法是？", "A": "每个元素都有一个前趋和一个后继元素", "B": "线性表中至少有一个元素", "C": "表中元素的排序顺序必须是由小到大或由大到小", "D": "除第一个元素和最后一个元素外，其余每个元素有且仅有一个前趋和一个后继元素", "answer": ""}
{"id": 194, "question": "线性表的顺序存储结构是一种？", "A": "随机存取的存储结构", "B": "顺序存取的存储结构", "C": "索引存取的存储结构", "D": "散列存取的存储结构", "answer": ""}
{"id": 195, "question": "以下关于顺序表的叙述中，正确的是？", "A": "顺序表可以利用一维数组表示，因此顺序表与一维数组在结构上是一致的，它们可以通用", "B": "在顺序表中，逻辑上相邻的元素在物理位置上不一定相邻", "C": "顺序表和一维数组一样，都可以进行随机存取", "D": "在顺序表中每一个元素的类型不必相同", "answer": ""}
{"id": 196, "question": "一个顺序表所占用存储空间的大小与__无关。", "A": "顺序表长度", "B": "顺序表中元素的数据类型", "C": "顺序表中元素各数据项的数据类型", "D": "顺序表中各元素的存放次序", "answer": ""}
{"id": 197, "question": "顺序表具有随机存取特性，指的是？", "A": "查找值为x的元素与顺序表中元素个数n无关", "B": "查找值为x的元素与顺序表中元素个数n有关", "C": "查找序号为i的元素与顺序表中元素个数n无关", "D": "查找序号为i的元素与顺序表中元素个数n有关", "answer": ""}
{"id": 198, "question": "对于栈操作数据的原则是？", "A": "先进先出", "B": "后进先出", "C": "后进后出", "D": "不分顺序", "answer": ""}
{"id": 199, "question": "栈的“先进后出”特性是指？", "A": "最后进栈的元素总是最先出栈", "B": "当同时进行进栈和出栈操作时，总是进栈优先", "C": "每当有出栈操作时，总要先进行一次进栈操作", "D": "每次出栈的元素总是最先进栈的元素", "answer": ""}
{"id": 200, "question": "给定一个空栈，若元素10、20、23、13依次进栈，然后有两个数出栈，又有3个数进栈，第一次进栈的元素23现在？", "A": "已出栈", "B": "从栈底算起第3个", "C": "处于栈顶", "D": "从栈底算起第4个", "answer": ""}
{"id": 201, "question": "设一个栈的输入序列为A、B、C、D，则借助一个栈所得到的输出序列不可能是？", "A": "A,B,C,D", "B": "D,C,B,A", "C": "A,C,D,B", "D": "D,A,B,C", "answer": ""}
{"id": 202, "question": "设栈的输入序列是1、2、3、4，则__不可能是其出栈序列。", "A": "1、2、4、3", "B": "2、1、3、4", "C": "4、3、1、2，", "D": "3、2、1、4", "answer": ""}
{"id": 203, "question": "栈和队列的不同点是？", "A": "都是线性表", "B": "都不是线性表", "C": "栈只能在一端进行插入删除操作，而队列在不同端进行插入删除操作", "D": "没有不同点", "answer": ""}
{"id": 204, "question": "以下__属于队列的基本运算。", "A": "对队列中的元素排序", "B": "取出最近进队的元素", "C": "在队头元素之前插入元素", "D": "删除队头元素", "answer": ""}
{"id": 205, "question": "一个队列的入列序列为1234，则出队序列是？", "A": "4321", "B": "1234", "C": "1432", "D": "3241", "answer": ""}
{"id": 206, "question": "关于串的的叙述，不正确的是？", "A": "串是字符的有限序列", "B": "空串是由空格构成的串", "C": "替换是串的一种重要运算", "D": "串既可以采用顺序存储，也可以采用链式存储", "answer": ""}
{"id": 207, "question": "两个字符串相等的条件是？", "A": "串的长度相等", "B": "含有相同的字符集", "C": "都是非空串", "D": "串的长度相等且对应的字符相同", "answer": ""}
{"id": 208, "question": "以下__是\"abcd321ABCD\"串的子串。", "A": "abcd", "B": "321AB", "C": "abcABC", "D": "21AB", "answer": ""}
{"id": 209, "question": "以下关于二叉树遍历的说法中，正确的是？", "A": "二叉树遍历就是访问二叉树中所有的结点", "B": "二叉树遍历就是访问二叉树中部分结点", "C": "二叉树遍历就是按照某种规律访问二叉树中所有的结点，且每个结点仅访问一次", "D": "二叉树遍历就是随机访问二叉树中所有的结点，且每个结点仅访问一次", "answer": ""}
{"id": 210, "question": "以下关于二叉树的说法中正确的是？", "A": "二叉树就是度为2的树", "B": "二叉树中不存在度大于2的结点", "C": "二叉树就是有序树", "D": "二叉树中每个结点的度都为2", "answer": ""}
{"id": 211, "question": "按照二叉树的定义，具有3个结点的二叉树有__种。", "A": "3", "B": "4", "C": "5", "D": "6", "answer": ""}
{"id": 212, "question": "二叉树中所有结点的度之和等于结点数加？", "A": "0", "B": "1", "C": "-1", "D": "2", "answer": ""}
{"id": 213, "question": "树最适合用来表示？", "A": "有序数据元素", "B": "无序数据元素", "C": "元素之间具有分支层次关系的数据", "D": "元素之间无联系的数据", "answer": ""}
{"id": 214, "question": "现有一“遗传”关系，设x是y的父亲，则x可以把他的属性遗传给y。表示该遗传关系最适合的数据结构为？", "A": "数组", "B": "树", "C": "图", "D": "线性表", "answer": ""}
{"id": 215, "question": "引入线索二叉树的目的是？", "A": "加快查找结点的前趋或后继结点的速度", "B": "为了能在二叉树中方便插入和删除", "C": "为了能方便找到双亲", "D": "使二叉树的遍历结果唯一", "answer": ""}
{"id": 216, "question": "图的遍历是指？", "A": "访问图的所有顶点", "B": "以某种次序访问图的所有顶点", "C": "从一个顶点出发访问图中所有顶点且每个顶点只能访问一次", "D": "从一个顶点出发访问图中所有顶点但每个顶点可以访问多次", "answer": ""}
{"id": 217, "question": "在一个图中，每个顶点的前趋顶点和后继顶点数可以有？", "A": "1个", "B": "2个", "C": "任意多个", "D": "0个", "answer": ""}
{"id": 218, "question": "一个无向连通图的生成树是含有该连通图的全部顶点的？", "A": "极小连通子图", "B": "极小子图", "C": "极大连通子图", "D": "极大子图", "answer": ""}
{"id": 219, "question": "静态查找表和动态查找表的区别是？", "A": "它们的逻辑结构相同", "B": "施加其上的操作不同", "C": "所包含的数据元素的类型不同", "D": "存储实现不同", "answer": ""}
{"id": 220, "question": "顺序查找法适合于存储结构为__的线性表。", "A": "哈希存储", "B": "顺序存储或链式存储", "C": "压缩存储", "D": "索引存储", "answer": ""}
{"id": 221, "question": "内排序方法的稳定性是指？", "A": "经过排序后，能使关键字相同的元素保持原顺序中的相对位置不变", "B": "经过排序后，能使关键字相同的元素保持原顺序中的绝对位置不变", "C": "排序算法的性能与被排序元素的数量关系不大", "D": "排序算法的性能与被排序元素的数量关系密切", "answer": ""}
{"id": 222, "question": "在二维数组中，每个数组元素同时处于__个向量中。", "A": "0", "B": "1", "C": "2", "D": "n", "answer": ""}
{"id": 223, "question": "已知单链表A长度为m，单链表B长度为n，它们分别由表头指针所指向，若将B整体连接到A的末尾，其时间复杂度应为？", "A": "O(1)", "B": "O(m)", "C": "O(n)", "D": "O(m+n)", "answer": ""}
{"id": 224, "question": "假定一个链式队列的队头和队尾指针分别为front和rear，则判断队空的条件为？", "A": "front==rear", "B": "front!=NULL", "C": "rear!=NULL", "D": "front==NULL", "answer": ""}
{"id": 225, "question": "若让元素1,2,3依次进栈，则出栈次序不可能出现__种情况。", "A": "3,2,1", "B": "2,1,3", "C": "3,1,2", "D": "1,3,2", "answer": ""}
{"id": 226, "question": "在一棵高度为5(假定树根结点的高度为0)的完全二叉树中，所含结点个数至少等于？", "A": "16", "B": "64", "C": "31", "D": "32", "answer": ""}
{"id": 227, "question": "具有n个顶点的有向图最多可包含有__条有向边。", "A": "n-1", "B": "n", "C": "n(n-1)/2", "D": "n(n-1)", "answer": ""}
{"id": 228, "question": "图的广度优先搜索类似于树的__遍历。", "A": "先根", "B": "中根", "C": "后根", "D": "层次", "answer": ""}
{"id": 229, "question": "for(inti=0;i<m;i++)for(intj=0;j<n;j++)a[i][j]=i*j;程序段的时间复杂度为？", "A": "O(m2)", "B": "O(n2)", "C": "O(m*n)", "D": "O(m+n)", "answer": ""}
{"id": 230, "question": "设有两个串t和p，求p在t中首次出现的位置的运算叫做？", "A": "求子串", "B": "模式匹配", "C": "串替换", "D": "串连接", "answer": ""}
{"id": 231, "question": "利用双向链表作线性表的存储结构的优点是？", "A": "便于单向进行插入和删除的操作", "B": "便于双向进行插入和删除的操作", "C": "节省空间", "D": "便于销毁结构释放空间", "answer": ""}
{"id": 232, "question": "设链式栈中结点的结构为（data,link），且top是指向栈顶的指针。若想在链式栈的栈顶插入一个由指针s所指的结点，则应执行__操作。", "A": "top->link=s;", "B": "s->link=top->link;top->link=s;", "C": "s->link=top;top=s;", "D": "s->link=top;top=top->link;", "answer": ""}
{"id": 233, "question": "一棵具有35个结点的完全二叉树的高度为__，假定空树的高度为-1。", "A": "5", "B": "6", "C": "7", "D": "8", "answer": ""}
{"id": 234, "question": "一个有n个顶点和n条边的无向图一定是__的。", "A": "连通", "B": "不连通", "C": "无回路", "D": "有回路", "answer": ""}
{"id": 235, "question": "在一个长度为n的顺序表的任一位置插入一个新元素的时间复杂度为？", "A": "O(n)", "B": "O(n/2)", "C": "O(1)", "D": "O(n2)", "answer": ""}
{"id": 236, "question": "栈的插入和删除操作在__进行。", "A": "栈顶", "B": "栈底", "C": "任意位置", "D": "指定位置", "answer": ""}
{"id": 237, "question": "已知广义表为A((a,b,c),(d,e,f))，从A中取出原子e的运算是？", "A": "Tail(Head(A))", "B": "Head(Tail(A))", "C": "Head(Tail(Head(Tail(A))))", "D": "Head(Head(Tail(Tail(A))))", "answer": ""}
{"id": 238, "question": "在一棵树的静态双亲表示中，每个存储结点包含__个域。", "A": "1", "B": "2", "C": "3", "D": "4", "answer": ""}
{"id": 239, "question": "有向图中的一个顶点的度数等于该顶点的？", "A": "入度", "B": "出度", "C": "入度与出度之和", "D": "(入度+出度)/２", "answer": ""}
{"id": 240, "question": "与邻接矩阵相比，邻接表更适合于存储？", "A": "无向图", "B": "连通图", "C": "稀疏图", "D": "稠密图", "answer": ""}
{"id": 241, "question": "较快的数据搜索方法是__搜索方法。", "A": "顺序", "B": "折半", "C": "单链", "D": "散列", "answer": ""}
{"id": 242, "question": "在闭散列表中，散列到同一个地址而引起的“堆积”问题是由于__引起的。", "A": "同义词之间发生冲突", "B": "非同义词之间发生冲突", "C": "同义词之间或非同义词之间发生冲突", "D": "散列表“溢出”", "answer": ""}
{"id": 243, "question": "设有一个nn的对称矩阵A，将其下三角部分按行为主序存放在一个一维数组B中，A[0][0]存放于B[0]中，则A[i][i]存放于__中。", "A": "B(i+3)*i/2", "B": "(i+1)*i/2", "C": "(2n-i+1)*i/2", "D": "(2n-i-1)*i/2", "answer": ""}
{"id": 244, "question": "根据n个元素建立一个有序单链表的时间复杂度为？", "A": "O(1)", "B": "O(n)", "C": "O(n2)", "D": "O(nlog2n)", "answer": ""}
{"id": 245, "question": "假定一个顺序存储的循环队列的队头和队尾指针分别为front和rear，则判断队空的条件为？", "A": "front+1==rear", "B": "rear+1==front", "C": "front==0", "D": "front==rear", "answer": ""}
{"id": 246, "question": "假定一棵二叉树的第i层上有3i个结点，则第i+1层上最多有__个结点。", "A": "3i", "B": "6i", "C": "9i", "D": "2i", "answer": ""}
{"id": 247, "question": "对于具有e条边的无向图，它的邻接表中共有__个边结点。", "A": "e-1", "B": "e+1", "C": "2e", "D": "3e", "answer": ""}
{"id": 248, "question": "图的深度优先搜索遍历类似于树的__次序遍历。", "A": "先根", "B": "中根", "C": "后根", "D": "层次", "answer": ""}
{"id": 249, "question": "栈S最多能容纳4个元素。现有6个元素按A、B、C、D、E、F的顺序进栈,问下列哪一个序列是可能的出栈序列？", "A": "E、D、C、B、A、F", "B": "B、C、E、F、A、D", "C": "C、B、E、D、A、F", "D": "A、D、F、E、B、C", "answer": ""}
{"id": 250, "question": "将一棵有100个结点的完全二叉树从根这一层开始，每一层从左到右依次对结点进行编号，根结点编号为1，则编号为49的结点的左孩子的编号为？", "A": "98", "B": "99", "C": "50", "D": "48", "answer": ""}
{"id": 251, "question": "对下列关键字序列用快速排序法进行排序时，速度最快的情形是？", "A": "{21、25、5、17、9、23、30}", "B": "{25、23、30、17、21、5、9}", "C": "{21、9、17、30、25、23、5}", "D": "{5、9、17、21、23、25、30}", "answer": ""}
{"id": 252, "question": "对于只在表的首、尾进行插入操作的线性表，宜采用的存储结构为？", "A": "顺序表", "B": "用头指针表示的单循环链表", "C": "用尾指针表示的单循环链表", "D": "单链表", "answer": ""}
{"id": 253, "question": "假设以第一个元素为分界元素，对字符序列（Q,H,C,Y,P,A,M,S,R,D,F,X）进行快速排序，则第一次划分的结果是？", "A": "(A,C,D,F,H,M,P,Q,R,S,X,Y)", "B": "(A,F,H,C,D,P,M,Q,R,S,Y,X)", "C": "(F,H,C,D,P,A,M,Q,R,S,Y,X)", "D": "(P,A,M,F,H,C,D,Q,S,Y,R,X)", "answer": ""}
{"id": 254, "question": "下面是三个关于有向图运算的叙述:（1）求有向图结点的拓扑序列，其结果必定是唯一的（2）求两个指向结点间的最短路径，其结果必定是唯一的（3）求AOE网的关键路径，其结果必定是唯一的其中哪个（些）是正确的？", "A": "只有（1）", "B": "（1）和（2）", "C": "都正确", "D": "都不正确", "answer": ""}
{"id": 255, "question": "若进栈序列为a,b,c，则通过入出栈操作可能得到的a,b,c的不同排列个数为？", "A": "4", "B": "5", "C": "6", "D": "7", "answer": ""}
{"id": 256, "question": "以下关于广义表的叙述中,正确的是？", "A": "广义表是由0个或多个单元素或子表构成的有限序列", "B": "广义表至少有一个元素是子表", "C": "广义表不能递归定义", "D": "广义表不能为空表", "answer": ""}
{"id": 257, "question": "排序时扫描待排序记录序列，顺次比较相邻的两个元素的大小，逆序时就交换位置。这是哪种排序方法的基本思想？", "A": "堆排序", "B": "直接插入排序", "C": "快速排序", "D": "冒泡排序", "answer": ""}
{"id": 258, "question": "已知一个有向图的邻接矩阵表示，要删除所有从第i个结点发出的边，应该？", "A": "将邻接矩阵的第i行删除", "B": "将邻接矩阵的第i行元素全部置为0", "C": "将邻接矩阵的第i列删除", "D": "将邻接矩阵的第i列元素全部置为0", "answer": ""}
{"id": 259, "question": "有一个含头结点的双向循环链表，头指针为head,则其为空的条件是？", "A": "head->priro==NULL", "B": "head->next==NULL", "C": "head->next==head", "D": "head->next->priro==NULL", "answer": ""}
{"id": 260, "question": "在顺序表(3,6,8,10,12,15,16,18,21,25,30)中，用折半法查找关键码值11，所需的关键码比较次数为？", "A": "2", "B": "3", "C": "4", "D": "5", "answer": ""}
{"id": 261, "question": "以下哪一个不是队列的基本运算？", "A": "从队尾插入一个新元素", "B": "从队列中删除第i个元素", "C": "判断一个队列是否为空", "D": "读取队头元素的值", "answer": ""}
{"id": 262, "question": "在长度为n的顺序表的第i个位置上插入一个元素（1≤i≤n+1），元素的移动次数为？", "A": "n–i+1", "B": "n–i", "C": "i", "D": "i–1", "answer": ""}
{"id": 263, "question": "对包含n个元素的哈希表进行查找，平均查找长度为？", "A": "O(log2n)", "B": "O(n)", "C": "O(nlog2n)", "D": "不直接依赖于n", "answer": ""}
{"id": 264, "question": "将一棵有100个结点的完全二叉树从根这一层开始，每一层从左到右依次对结点进行编号，根结点编号为1，则编号最大的非叶结点的编号为？", "A": "48", "B": "49", "C": "50", "D": "51", "answer": ""}
{"id": 265, "question": "某二叉树结点的中序序列为A、B、C、D、E、F、G，后序序列为B、D、C、A、F、G、E，则其左子树中结点数目为？", "A": "3", "B": "2", "C": "4", "D": "5", "answer": ""}
{"id": 266, "question": "若采用邻接矩阵存储具有n个顶点的无向图，则该邻接矩阵是一个？", "A": "上三角矩阵", "B": "稀疏矩阵", "C": "对角矩阵", "D": "对称矩阵", "answer": ""}
{"id": 267, "question": "图的深度优先搜索类似于树的__次序遍历。", "A": "先根", "B": "中根", "C": "后根", "D": "层次", "answer": ""}
{"id": 268, "question": "图的广度优先搜索类似于树的__次序遍历。", "A": "先根", "B": "中根", "C": "后根", "D": "层次", "answer": ""}
{"id": 269, "question": "在用Kruskal算法求解带权连通图的最小（代价）生成树时，通常采用一个__辅助结构，判断一条边的两个端点是否在同一个连通分量上。", "A": "位向量", "B": "堆", "C": "并查集", "D": "生成树顶点集合", "answer": ""}
{"id": 270, "question": "采用Dijkstra算法求解带权有向图的最短路径问题时，要求图中每条边所带的权值必须是__数。", "A": "非零", "B": "非整", "C": "非负", "D": "非正", "answer": ""}
{"id": 271, "question": "设有向图有n个顶点和e条边，采用邻接表作为其存储表示，在进行拓扑排序时，总的计算时间为？", "A": "O(nlog2e)", "B": "O(n+e)", "C": "O(ne)", "D": "O(n2)", "answer": ""}
{"id": 272, "question": "若待排序对象序列在排序前已基本按排序码递增顺序排列，则采用__方法比较次数最少。", "A": "直接插入排序", "B": "快速排序", "C": "归并排序", "D": "直接选择排序", "answer": ""}
{"id": 273, "question": "对待排序的元素序列进行划分，将其分为左、右两个子序列，再对两个子序列施加同样的排序操作，直到子序列为空或只剩一个元素为止。这样的排序方法是？", "A": "直接选择排序", "B": "直接插入排序", "C": "快速排序", "D": "起泡排序", "answer": ""}
{"id": 274, "question": "对5个不同的数据元素进行直接插入排序，最多需要进行__次比较。", "A": "8", "B": "10", "C": "15", "D": "25", "answer": ""}
{"id": 275, "question": "下列排序算法中，__算法是不稳定的。", "A": "起泡排序", "B": "直接插入排序", "C": "基数排序", "D": "快速排序", "answer": ""}
{"id": 276, "question": "假设某文件经过内部排序得到100个初始归并段，那么如果要求利用多路平衡归并在3趟内完成排序，则应取的归并路数至少是？", "A": "3", "B": "4", "C": "5", "D": "6", "answer": ""}
{"id": 277, "question": "在基于排序码比较的排序算法中，__算法在最坏情况下的时间复杂度不高于O(nlog2n)。", "A": "起泡排序", "B": "希尔排序", "C": "堆排序", "D": "快速排序", "answer": ""}
{"id": 278, "question": "在下列排序算法中，__算法使用的附加空间与输入序列的长度及初始排列无关。", "A": "锦标赛排序", "B": "快速排序", "C": "基数排序", "D": "归并排序", "answer": ""}
{"id": 279, "question": "一个对象序列的排序码为{46,79,56,38,40,84}，采用快速排序（以位于最左位置的对象为基准）所得到的第一次划分结果为()。", "A": "{38,46,79,56,40,84}", "B": "{38,79,56,46,40,84}", "C": "{40,38,46,79,56,84}", "D": "{38,46,56,79,40,84}", "answer": ""}
{"id": 280, "question": "如果将所有中国人按照生日（不考虑年份，只考虑月、日）来排序，那么使用下列排序算法中__算法最快。", "A": "归并排序", "B": "希尔排序", "C": "快速排序", "D": "基数排序", "answer": ""}
{"id": 281, "question": "设有一个含有200个元素的表待散列存储，用线性探查法解决冲突，按关键码查询时找到一个元素的平均探查次数不能超过1.5，则散列表的长度应至少为？（注：平均探查次数的计算公式为Snl={1+1/(1-α)}/2,其中α为装填因子）", "A": "400", "B": "526", "C": "624", "D": "676", "answer": ""}
{"id": 282, "question": "5阶B树中,每个结点最多允许有__个关键码。", "A": "2", "B": "3", "C": "4", "D": "5", "answer": ""}
{"id": 283, "question": "在10阶B树中根结点所包含的关键码个数最少为？", "A": "0", "B": "1", "C": "3", "D": "4", "answer": ""}
{"id": 284, "question": "在一棵高度为h的B树中，叶结点处于第__层。（注：树根结点为第0层，B树高度为失败结点所处层数）。", "A": "h-1", "B": "h", "C": "h+1", "D": "h+2", "answer": ""}
{"id": 285, "question": "在一棵高度为h的B树中，插入一个新关键码时，为搜索插入位置需读取__个结点。", "A": "h-1", "B": "h", "C": "h+1", "D": "h+2", "answer": ""}
{"id": 286, "question": "当对一个线性表R[60]进行索引顺序搜索（分块搜索）时，若共分成了10个子表，每个子表有6个表项。假定对索引表和数据子表都采用顺序搜索，则搜索每一个表项的平均搜索长度为？", "A": "7", "B": "8", "C": "9", "D": "10", "answer": ""}
{"id": 287, "question": "当对一个线性表R[60]进行索引顺序搜索（分块搜索）时，若共分成了8个子表，每个子表有6个表项。假定对索引表和数据子表都采用顺序搜索，则搜索每一个表项的平均搜索长度为？", "A": "7", "B": "8", "C": "9", "D": "10", "answer": ""}
{"id": 288, "question": "既希望较快的搜索又便于线性表动态变化的搜索方法是？", "A": "顺序搜索", "B": "折半搜索", "C": "散列搜索", "D": "索引顺序搜索", "answer": ""}
{"id": 289, "question": "散列函数应该有这样的性质，即函数值应当以__概率取其值域范围内的每一个值。", "A": "最大", "B": "最小", "C": "平均", "D": "同等", "answer": ""}
{"id": 290, "question": "设散列地址空间为0-m-1，k为表项的关键码，散列函数采用除留余数法，即Hash(k)=k%p。为了减少发生冲突的频率，一般取p为？", "A": "m", "B": "小于m的最大质数", "C": "大于m的最小质数", "D": "小于m的最大合数", "answer": ""}
